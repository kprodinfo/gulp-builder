@mixin m($width) {
  $width: map_get($breakpoints, $width);
  $width: $width + 20px;
  @media(max-width: $width) {
    @content;
  }
}

@mixin wrap() {
  width: map_get($breakpoints, 'xl');

  @if map-has-key($breakpoints, 'xl') {
    @media(max-width: map_get($breakpoints, 'xl') + 20px) {
      width: map_get($breakpoints, 'l');
    }
  }

  @if map-has-key($breakpoints, 'l') {
    @media(max-width: map_get($breakpoints, 'l') + 20px) {
      width: map_get($breakpoints, 'm');
    }
  }

  @if map-has-key($breakpoints, 'm') {
    @media(max-width: map_get($breakpoints, 'm') + 20px) {
      width: map_get($breakpoints, 's');
    }
  }

  @if map-has-key($breakpoints, 's') {
    @media(max-width: map_get($breakpoints, 's') + 20px) {
      width: map_get($breakpoints, 'xs');
    }
  }

  @if map-has-key($breakpoints, 'xs') {
    @media(max-width: map_get($breakpoints, 'xs') + 20px) {
      width: 100%
    }
  }
}


// Миксины
// ======== Гамбургер ======== //
// @width: Ширина кнопки гамбургера
// @height: Высота кнопки гамбургера
// @weight: Толищна линий
// @color: цвет линий
// @active: цвет линий при активном состоянии
@mixin hamburger($width, $height, $weight, $color, $active) {
  .hamburger {
    position: relative;
    width: $width+px;
    height: $height+px;
    background: none;
    border: none;
    padding: 0;
    z-index: 100;
    &:hover {
      cursor: pointer;
    }
    &:focus {
      outline: none;
    }
    &__line {
      position: absolute;
      width: 100%;
      height: $weight+px;
      background: $color;
      transition: .4s;

      &-top {
        top: 0 + ($weight/2)+px;
        &--active {
          background: $active;
          opacity: 0;
          top: 50%;
        }
      }
      &-center {
        top: 50%;
        &:after {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: $active;
          transition: .4s;
        }
        &--active {
          background: $active;
          transform: rotateZ(45deg);
          &:after {
            background: $active;
            transform: rotateZ(-90deg);
          }
        }
      }
      &-bottom {
        bottom: 0 - ($weight/2)+px;
        &--active {
          background: $active;
          opacity: 0;
          bottom: 50%;
        }
      }
    }
  }
}


// ======== Адаптивные иконки ======== //
// @name: название иконки и класса, который будет сгенерирован, например home -> будет искать иконку home.{type} по пути {path} и сгенерирует название класса .icon_home
// @width: Ширина
// @height: Высота
// @breakpoint: ширина экрана при которой иконка примет высоту и ширину в 75% от @width и @height
// @breakpoint2: ширина экрана при которой иконка примет высоту и ширину в 50% от @width и @height
// @type: расширешние текущей иконки, по дефолту SVG
@mixin icon($name, $width, $height, $breakpoint: '', $breakpoint2: '', $type: '.svg') {
  &_#{$name} {
    $name: '../img/icons/'+$name+$type;
    width: $width+px;
    height: $height+px;
    background: url($name);
    background-size: cover;
    @if $breakpoint != '' {
      @media(max-width: $breakpoint) {
        width: $width * 0.75+px;
        height: $height * 0.75+px;
      }
    }
    @if $breakpoint2 != '' {
      @media(max-width: $breakpoint2) {
        width: $width * 0.5+px;
        height: $height * 0.5+px;
      }
    }
  }
}